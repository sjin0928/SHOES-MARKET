<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="shoesmarket">
	<!-- select 태그 3개 속성 id, resultType, parameterType
	id : 사용할 명칭(필수항목), 현재 매퍼파일에서 유일한 이름 사용
	resultType : 조회 결과값 저장하기 위한 데이터 타입(1개 데이터에 대한 타입지정)
	parameterType : 전달 받은 파라미터 데이터의 타입 지정(선택적)
	-->
	<!-- 전체 상품 조회(신상품순) -->
	<select id="allNew" resultType="ItemVO">
		SELECT ITEM_NUM, NAME, PRICE, STOCK, IMAGE_PATH, 
				ITEM_DETAIL, REG_DATE, MOD_DATE, BRAND , ITEM_STATUS
		FROM ITEM
		WHERE ITEM_STATUS = 'Y'
		ORDER BY ITEM_NUM DESC
	</select>
	
	<!-- 전체 상품 조회(판매수량순 / 판매 내역 없는 것 포함 / 판매 내역 없는 건 신상품 순) -->
	<select id="allBest" resultType="ItemVO">
		SELECT I.ITEM_NUM, I.NAME, I.PRICE, I.STOCK, I.IMAGE_PATH,
		       I.ITEM_DETAIL, I.REG_DATE, I.MOD_DATE, I.BRAND, I.ITEM_STATUS, SUM(O.QUANTITY) AS QUANTITY
		FROM ITEM I
		LEFT OUTER JOIN ORDERITEMS O ON I.ITEM_NUM = O.ITEM_NUM
		WHERE I.ITEM_STATUS = 'Y'
		GROUP BY I.ITEM_NUM, I.NAME, I.PRICE, I.STOCK, I.IMAGE_PATH,
		         I.ITEM_DETAIL, I.REG_DATE, I.MOD_DATE, I.BRAND, I.ITEM_STATUS
		ORDER BY MAX(O.QUANTITY) DESC NULLS LAST, I.ITEM_NUM DESC
	</select>
	
	<!-- 상품 목록 페이징 처리(베스트순) -->
	<select id="itemBestList" resultType="ItemVO" parameterType="map">
	SELECT *
		FROM (
		  SELECT ROWNUM AS RNUM, T.*
		  FROM (
			    SELECT I.ITEM_NUM, I.NAME, I.PRICE, I.STOCK, I.IMAGE_PATH,
			       I.ITEM_DETAIL, I.REG_DATE, I.MOD_DATE, I.BRAND, I.ITEM_STATUS, SUM(O.QUANTITY) AS QUANTITY
			FROM ITEM I
			LEFT OUTER JOIN ORDERITEMS O ON I.ITEM_NUM = O.ITEM_NUM
			WHERE I.ITEM_STATUS = 'Y'
			GROUP BY I.ITEM_NUM, I.NAME, I.PRICE, I.STOCK, I.IMAGE_PATH,
			         I.ITEM_DETAIL, I.REG_DATE, I.MOD_DATE, I.BRAND, I.ITEM_STATUS
			ORDER BY MAX(O.QUANTITY) DESC NULLS LAST, I.ITEM_NUM DESC
		  ) T
		)
		WHERE RNUM BETWEEN #{begin} AND #{end}
	</select>
	
	<!-- 상품 번호로 상품 상세 조회 -->
	<select id="productDetail" parameterType="int" resultType="ItemVO">
		SELECT ITEM_NUM, NAME, PRICE, STOCK, IMAGE_PATH, 
				ITEM_DETAIL, REG_DATE, MOD_DATE, BRAND , ITEM_STATUS
		FROM ITEM
		WHERE ITEM_STATUS = 'Y'
		AND ITEM_NUM = #{itemNum}
	</select>
	
	<!-- 주문 내역이 있는 상품들 조회 -->
	<!-- <select id="orderedAll" resultType="ItemVO">
	SELECT *
		FROM ITEM I
			LEFT OUTER JOIN ORDERITEMS O 
       		ON I.ITEM_NUM = O.ITEM_NUM
        WHERE O.ORDERITEM_NUM IS NOT NULL
	</select> -->
	
	<!-- ITEM_STATUS 'N'으로 update -->
	<update id="statusUpdate" parameterType="int">
	UPDATE ITEM 
	SET ITEM_STATUS = 'N'
	WHERE ITEM_NUM = #{itemNum }
	</update>
	
	<insert id="itemWrite" parameterType="ItemVO">
		INSERT INTO ITEM (
	    ITEM_NUM, NAME, PRICE, STOCK, IMAGE_PATH, 
	    ITEM_DETAIL, REG_DATE, MOD_DATE, BRAND ,ITEM_STATUS )
		VALUES (ITEM_SEQ.NEXTVAL, #{name }, #{price }, #{stock }, #{imagePath },
		    #{itemDetail }, SYSDATE, SYSDATE, #{brand } ,'Y'
		)
	</insert>
	
	<update id="itemUpdate" parameterType="ItemVO">
		UPDATE ITEM
		SET NAME = #{name },
			PRICE = #{price },
			STOCK = #{stock },
			IMAGE_PATH = #{imagePath },
			ITEM_DETAIL = #{itemDetail },
			MOD_DATE = SYSDATE,
			BRAND = #{brand }
		WHERE ITEM_NUM = #{itemNum }
	</update>
	
	<!-- <delete id="itemDelete" parameterType="int">
		DELETE FROM ITEM WHERE ITEM_NUM = #{itemNum }
	</delete> -->
	
	<!-- 제품 검색해서 조회 -->
	<select id="itemSearch" parameterType="map" resultType="ItemVO">
		SELECT ITEM_NUM, NAME, PRICE, STOCK, IMAGE_PATH, 
				ITEM_DETAIL, REG_DATE, MOD_DATE, BRAND ,ITEM_STATUS
		FROM ITEM
		<where>
			<!-- 상품명 -->
			<if test="idx == 1">
				NAME LIKE '%'|| #{keyword } ||'%'
			</if>
			<!-- 브랜드 -->
			<if test="idx == 2">
				BRAND LIKE '%'|| #{keyword } ||'%'
			</if>
			AND ITEM_STATUS = 'Y'
		</where>
		<!-- 신상품 순 -->
		ORDER BY ITEM_NUM DESC
	</select>
	
	<!-- 브랜드 카테고리 -->
	<select id="allAdidas" resultType="ItemVO">
		SELECT ITEM_NUM, NAME, PRICE, STOCK, IMAGE_PATH, 
				ITEM_DETAIL, REG_DATE, MOD_DATE, BRAND, ITEM_STATUS
		FROM ITEM
		WHERE ITEM_STATUS = 'Y'
		AND BRAND = '아디다스'
	</select>
	
	<select id="allNewBal" resultType="ItemVO">
		SELECT ITEM_NUM, NAME, PRICE, STOCK, IMAGE_PATH, 
				ITEM_DETAIL, REG_DATE, MOD_DATE, BRAND, ITEM_STATUS 
		FROM ITEM
		WHERE ITEM_STATUS = 'Y'
		AND BRAND = '뉴발란스'
	</select>
	
	<select id="allConverse" resultType="ItemVO">
		SELECT ITEM_NUM, NAME, PRICE, STOCK, IMAGE_PATH, 
				ITEM_DETAIL, REG_DATE, MOD_DATE, BRAND, ITEM_STATUS
		FROM ITEM
		WHERE ITEM_STATUS = 'Y'
		AND BRAND = '컨버스'
	</select>
	
	<select id="allPuma" resultType="ItemVO">
		SELECT ITEM_NUM, NAME, PRICE, STOCK, IMAGE_PATH, 
				ITEM_DETAIL, REG_DATE, MOD_DATE, BRAND, ITEM_STATUS
		FROM ITEM
		WHERE ITEM_STATUS = 'Y'
		AND BRAND = '푸마'
	</select>
	
	<select id="allVans" resultType="ItemVO">
		SELECT ITEM_NUM, NAME, PRICE, STOCK, IMAGE_PATH, 
				ITEM_DETAIL, REG_DATE, MOD_DATE, BRAND, ITEM_STATUS
		FROM ITEM
		WHERE ITEM_STATUS = 'Y'
		AND BRAND = '반스'
	</select>
	
	<!-- 전체 게시글 건수 조회 -->
	<select id="itemTotalCount" resultType="int">
		SELECT COUNT(*) AS CNT FROM ITEM
		WHERE ITEM_STATUS = 'Y'
	</select>
	
	<!-- (상품게시글)페이지에 해당하는 게시글 조회 -->
	<select id="itemList" resultType="ItemVO" parameterType="map">
		SELECT ITEM_NUM, NAME, PRICE, STOCK, IMAGE_PATH, 
				ITEM_DETAIL, REG_DATE, MOD_DATE, BRAND, ITEM_STATUS
			FROM (SELECT ROWNUM AS RNUM, I.*
			        FROM (SELECT * 
			              FROM ITEM 
			              WHERE ITEM_STATUS = 'Y'
			              ORDER BY ITEM_NUM DESC ) I
			      )
			WHERE RNUM BETWEEN #{begin} AND #{end}
	</select>
	
	<!-- 상품 목록 페이징 처리 -->
	
	<!-- 고객 목록 페이징 처리 -->
	<select id="customerList" resultType="CustomerVO" parameterType="map">
	SELECT * 
 		FROM (SELECT ROWNUM AS RNUM, C.*   
      		FROM (SELECT *
		 			FROM CUSTOMER ORDER BY CUS_NUM) C
        		 )
        		 WHERE RNUM BETWEEN #{begin} AND #{end}
	</select>
	
	<!-- 고객 수 확인 : 페이징 처리 시 필요함 -->
	<select id="customerTotalCount" resultType="int">
		SELECT COUNT(*) AS CNT FROM CUSTOMER
	</select>
	
	<!-- 관리자 아이디, 비번 확인 -->
	<select id="loginAdmin" resultType="AdminVO">
	SELECT ADMIN_ID, ADMIN_PASSWORD 
	FROM ADMIN
	</select>
	
	<!-- 주문 내역 조회 -->
	<select id="getOrderedList" resultType="BuyVO" parameterType="int">
	SELECT BUY_NUM, CUS_NUM, PAY_STATUS, BUY_DATE, ZIP_CODE,
    ADDRESS, DETAIL_ADDRESS, PHONE, DELIVERY_REQUEST, PAYMENT,
    CANCEL_STATUS, TOTAL_PRICE 
    FROM BUY
    WHERE CUS_NUM = #{cusNum}
	</select>
	
	<!-- 게시물 내역 조회 -->
	<select id="getInquiryList" resultType="InquiryVO" parameterType="int">
	SELECT INQUIRY_NUM, CUS_NUM, SECRET_STATUS, TITLE, CONTENTS
    , REG_DATE, MOD_DATE, ITEM_NUM
    FROM INQUIRY
    WHERE CUS_NUM = #{cusNum}
	</select>
	
	<!-- 주문 시, 해당 제품 장바구니 리스트에서 삭제 -->
	<delete id="deleteCartItem" parameterType="int">
	 DELETE FROM CART WHERE CART_NUM =#{cartNum}
	</delete>
	
	<!-- 구매 시 해당 아이템 재고 업데이트 : itemNum , stock --> 
	<update id="updateItemStock" parameterType="map">
	UPDATE ITEM 
	SET STOCK = #{stock}
	WHERE ITEM_NUM = #{itemNum}
	</update>
	
	<!-- 효정 -->
	<!-- 관리자 : 회원 전체 조회 -->
	<select id="customer" resultType="CustomerVO">
		SELECT CUS_NUM, CUS_EMAIL, CUS_PASSWORD, CUS_NAME, CUS_NICK_NAME,
    	CUS_PHONE_NUM, CUS_REGDATE, CUS_MODDATE 
		FROM CUSTOMER ORDER BY CUS_NUM
	</select>

	<select id="login" parameterType="map" resultType="CustomerVO">
		SELECT * FROM CUSTOMER WHERE CUS_ID = #{cusId} AND CUS_PASSWORD = #{cusPassword}
	</select>

	<select id="getNextCusNum" resultType="int">
		SELECT CUSTOMER_SEQ.NEXTVAL FROM DUAL
	</select>

	<insert id="insertCustomer" parameterType="CustomerVO">
		INSERT INTO CUSTOMER
		(CUS_NUM, CUS_ID, CUS_PASSWORD, CUS_NAME, CUS_NICK_NAME, CUS_EMAIL,
		CUS_PHONE_NUM, CUS_REGDATE, CUS_MODDATE)
		VALUES (CUSTOMER_SEQ.NEXTVAL,
		#{cusId}, #{cusPassword}, #{cusName}, #{cusNickName}, #{cusEmail},
		#{cusPhoneNum}, #{cusRegDate}, #{cusModDate})
	</insert>

	<select id="checkDuplicateId" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM CUSTOMER WHERE CUS_ID = #{cusId}
	</select>

	<select id="checkDuplicateNickName" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM CUSTOMER WHERE CUS_NICK_NAME = #{cusNickName}
	</select>
	
	<select id="checkDuplicateEmail" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM CUSTOMER WHERE CUS_EMAIL = #{cusEmail}
	</select>
	
	<select id="checkDuplicatePhoneNum" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM CUSTOMER WHERE CUS_PHONE_NUM = #{cusPhoneNum}
	</select>
	
	<update id="updateCustomerInfo" parameterType="CustomerVO">
		UPDATE CUSTOMER
		SET
		CUS_PASSWORD = #{cusPassword},
		CUS_NAME = #{cusName},
		CUS_NICK_NAME =#{cusNickName},
		CUS_PHONE_NUM = #{cusPhoneNum},
		CUS_MODDATE = #{cusModDate}
		WHERE CUS_NUM = #{cusNum} AND CUS_ID = #{cusId} AND CUS_EMAIL = #{cusEmail}
	</update>

	<delete id="deleteCustomer" parameterType="map">
		DELETE FROM CUSTOMER
		WHERE CUS_NUM = #{cusNum} AND CUS_ID = #{cusId}
	</delete>

	<select id="findIdByPhone" parameterType="map"
		resultType="String">
		SELECT CUS_ID FROM CUSTOMER
		WHERE CUS_NAME = #{cusName} AND CUS_PHONE_NUM = #{cusPhoneNum}
	</select>

	<select id="findIdByEmail" parameterType="map"
		resultType="String">
		SELECT CUS_ID FROM CUSTOMER
		WHERE CUS_NAME = #{cusName} AND CUS_EMAIL = #{cusEmail}
	</select>

	<select id="findPassword" parameterType="map"
		resultType="String">
		SELECT CUS_PASSWORD FROM CUSTOMER
		WHERE CUS_ID = #{cusId} AND CUS_NAME = #{cusName} AND CUS_PHONE_NUM = #{cusPhoneNum}
	</select>

	<select id="findPasswordByEmail" parameterType="map"
		resultType="String">
		SELECT CUS_PASSWORD FROM CUSTOMER
		WHERE CUS_ID = #{cusId} AND CUS_NAME = #{cusName} AND CUS_EMAIL = #{cusEmail}
	</select>
	
	<!-- 주영 -->
	<!-- Cart 장바구니 보기(selectall) -->
	<select id="cart" resultType="CartVO"> 
		SELECT c.*, i.price, i.name, i.item_detail
		FROM cart c
		INNER JOIN item i ON c.item_Num = i.item_Num
		ORDER BY c.CART_NUM
	</select>
	
	<!-- Cart 개별 장바구니 항목 불러오기(select) -->
	<select id="getCartItemByCartNum" resultType="com.mystudy.project.vo.CartVO">
	    SELECT * FROM CART WHERE CART_NUM = #{cartNum}
	</select>
	
	<!-- Cart 장바구니 담기(insert) fk(itemNum, id) -->
	<insert id="cartInsert" parameterType="CartVO"> 
		INSERT INTO CART (CART_NUM, ITEM_NUM, CUS_NUM, CART_QUANTITY, CART_REGDATE) 
		VALUES (cart_seq.nextval, #{itemNum}, #{cusNum}, #{cartQuantity}, #{cartRegdate}) 
	</insert>
	
	<!-- Cart 장바구니수량 수정(update) -->
	<update id="cartUpdate" parameterType="CartVO"> 
    	UPDATE CART SET CART_QUANTITY = #{cartQuantity} WHERE CART_NUM = #{cartNum} 
	</update>
	
	<!-- Cart 장바구니 삭제(delete) -->
	<delete id="cartDelete" parameterType="int"> 
		DELETE FROM CART WHERE CART_NUM = #{cartNum} 
	</delete>
	
	<!-- Cart 장바구니에 담긴 내역 조회 -->
	<select id="getCartList" parameterType="int" resultType="CartVO"> 
		SELECT c.*, i.price, i.name, i.item_detail
	    FROM cart c
	    INNER JOIN item i ON c.item_Num = i.item_Num
	    WHERE c.CART_NUM = #{cartNum}
	</select>
	
	
	<!-- Buy 결제창에서 Purchase로 이동해서 결제 -->
	<select id="getBuyList" resultType="OrderItemsVO">
	    SELECT c.*, o.orderitem_Num, o.price, o.reg_Date
	    FROM cart c
	    INNER JOIN orderitems o ON c.item_Num = o.item_Num
	</select>
	
	<insert id="putCart" parameterType="CartVO">
	INSERT INTO CART (
	CART_NUM, ITEM_NUM, CUS_NUM, CART_QUANTITY, CART_REGDATE)
	VALUES (CART_SEQ.NEXTVAL , #{itemNum}, #{cusNum}, #{cartQuantity}, SYSDATE)
	</insert>
	
	<!-- 주문할 때 사용  -->
	<insert id="buyItem" parameterType="BuyVO">
	INSERT INTO BUY (
		BUY_NUM, CUS_NUM, PAY_STATUS, BUY_DATE, ZIP_CODE,
	    ADDRESS, DETAIL_ADDRESS, PHONE, DELIVERY_REQUEST, PAYMENT,
	    CANCEL_STATUS, TOTAL_PRICE)
	VALUES (BUY_SEQ.NEXTVAL, #{cusNum}, '결제완료', SYSDATE, #{zipCode},
		 #{address}, #{detailAddress}, #{phone}, #{deliveryRequest}, #{payment},
		 '주문완료', #{totalPrice})
	</insert>
	
	<!-- 주문할 때 사용  -->
	<insert id="buyOrderItem" parameterType="OrderItemsVO">
	INSERT INTO ORDERITEMS(
	    ORDERITEM_NUM, ITEM_NUM, BUY_NUM, 
	    QUANTITY, PRICE, REG_DATE
	)
	VALUES (ORDERITEMS_SEQ.NEXTVAL , #{itemNum}, #{buyNum}, 
	        #{quantity}, #{price}, SYSDATE)
	</insert>
	
	<!-- 방금 buy insert한 번호 가져오기  -->
	<select id="getBuySeq" resultType="int">
	SELECT BUY_SEQ.CURRVAL FROM dual
	</select>
	
	<!-- 231024 박수진 -->
	<!-- 전체 게시글 건수 조회 -->
	<select id="totalCount" resultType="int">
		SELECT COUNT(*) AS CNT FROM INQUIRY
	</select>
	
	<!-- 문의게시글 전체 검색 -->
	<select id="inquiry" parameterType="map" resultType="InquiryVO">
		SELECT *
		  FROM (SELECT ROWNUM AS RNUM, DATA.*
		          FROM (SELECT INQ.INQUIRY_NUM, INQ.SECRET_STATUS, CUS.CUS_NICK_NAME, 
		                       INQ.TITLE, INQ.ITEM_NUM, INQ.REG_DATE, INQ.MOD_DATE
		                  FROM CUSTOMER CUS, INQUIRY INQ
		                 WHERE CUS.CUS_NUM = INQ.CUS_NUM
		                 ORDER BY INQUIRY_NUM DESC) DATA
		       )
		 WHERE RNUM BETWEEN #{begin} AND #{end}
		 ORDER BY INQUIRY_NUM DESC
	</select>
	
	<!-- 게시글 검색 건수 조회 -->
	<select id="searchCount" parameterType="map" resultType="int">
		SELECT COUNT(*) AS CNT
  		  FROM CUSTOMER CUS, INQUIRY INQ
 		 WHERE CUS.CUS_NUM = INQ.CUS_NUM
		<choose>
			<when test="idx == 0">
				AND CUS_NICK_NAME LIKE '%'|| #{keyword} ||'%'
			</when>
			<when test="idx == 1">
				AND TITLE LIKE '%'|| #{keyword} ||'%'
			</when>
			<when test="idx == 2">
				AND ITEM_NUM = #{keyword}
			</when>
		</choose>
	</select>
	

	<!-- 문의게시글 동적검색 -->
	<select id="inquirySearch" parameterType="map" resultType="InquiryVO">
		SELECT *
  		  FROM (SELECT ROWNUM AS RNUM, DATA.*
          		  FROM (SELECT INQ.INQUIRY_NUM, INQ.SECRET_STATUS, CUS.CUS_NICK_NAME, 
                      		   INQ.TITLE, INQ.ITEM_NUM, INQ.REG_DATE, INQ.MOD_DATE
                  		  FROM CUSTOMER CUS, INQUIRY INQ
                 		 WHERE CUS.CUS_NUM = INQ.CUS_NUM
					<choose>
						<when test="idx == 0">
							AND CUS_NICK_NAME LIKE '%'|| #{keyword} ||'%'
						</when>
						<when test="idx == 1">
							AND TITLE LIKE '%'|| #{keyword} ||'%'
						</when>
						<when test="idx == 2">
							AND ITEM_NUM = #{keyword}
						</when>
					</choose>
                 		 ORDER BY INQUIRY_NUM DESC) DATA)
         WHERE RNUM BETWEEN #{begin} AND #{end}
		 ORDER BY INQUIRY_NUM DESC
	</select>
	
	<!-- 게시글의 내용 -->
	<select id="inquiryView" parameterType="int" resultType="InquiryVO">
		SELECT *
 		  FROM CUSTOMER CUS, INQUIRY INQ
 		 WHERE CUS.CUS_NUM = INQ.CUS_NUM
   		   AND INQUIRY_NUM = #{inquiryNum}
	</select>
	
	<!-- 게시글의 댓글 리스트 -->
	<select id="inquiryCommentAll" parameterType="int" resultType="InquiryCommentVO">
 		SELECT *
 		  FROM INQUIRY_COMMENT
 		 WHERE INQUIRY_NUM = #{inquiryNum}
 		 ORDER BY IQ_COMMENT_NUM DESC
	</select>
	
	<!-- 게시글의 내용 수정 -->
	<update id="inquiryUpdateFile" parameterType="InquiryVO">
		UPDATE INQUIRY
		   SET TITLE = #{title}, 
		       CONTENTS = #{contents}, 
		       MOD_DATE = SYSDATE, 
		       INQ_IMG_PATH = #{inqImgPath}, 
		       INQ_IMG_NAME = #{inqImgName}
		 WHERE INQUIRY_NUM = #{inquiryNum}
	</update>
	<!-- 게시글의 내용 수정(파일x) -->
	<update id="inquiryUpdate" parameterType="InquiryVO">
		UPDATE INQUIRY
		   SET TITLE = #{title}, 
		       CONTENTS = #{contents}, 
		       MOD_DATE = SYSDATE
		 WHERE INQUIRY_NUM = #{inquiryNum}
	</update>
	
	<!-- 게시글 삭제 -->
	<delete id="inquiryDelete" parameterType="InquiryVO">
		DELETE FROM INQUIRY
		 WHERE INQUIRY_NUM = #{inquiryNum}
	</delete>
	
	
	<!-- 문의게시글 쓰기 -->
	<insert id="inquiryWrite" parameterType="InquiryVO">
		INSERT INTO INQUIRY
    		   (INQUIRY_NUM, CUS_NUM, SECRET_STATUS, TITLE, CONTENTS, 
    		   REG_DATE, MOD_DATE, ITEM_NUM, INQ_IMG_PATH, INQ_IMG_NAME)
		VALUES (INQUIRY_SEQ.NEXTVAL, #{cusNum}, #{secretStatus}, #{title}, #{contents},
			   SYSDATE, SYSDATE, #{itemNum}, #{inqImgPath}, #{inqImgName})
	</insert>
	<!-- 문의게시글 쓰기 -->
	<insert id="inquiryWriteFile" parameterType="InquiryVO">
		INSERT INTO INQUIRY
    		   (INQUIRY_NUM, CUS_NUM, SECRET_STATUS, TITLE, CONTENTS, 
    		   REG_DATE, MOD_DATE, ITEM_NUM, INQ_IMG_PATH, INQ_IMG_NAME)
		VALUES (INQUIRY_SEQ.NEXTVAL, #{cusNum}, #{secretStatus}, #{title}, #{contents},
			   SYSDATE, SYSDATE, #{itemNum}, #{inqImgPath}, #{inqImgName})
	</insert>
	
	<!-- 상품번호 조회 -->
	<select id="inquiryItemSearch" parameterType="String" resultType="int">
		SELECT ITEM_NUM
		FROM ITEM
		WHERE NAME = #{itemName}
	</select>
	
	<!-- 공지사항 전체 게시글 건수 조회 -->
	<select id="noticeTotalCount" resultType="int">
		SELECT COUNT(*) AS CNT FROM NOTICE
	</select>
	
	<!-- 공지사항 게시글 전체 검색 -->
	<select id="noticeList" parameterType="map" resultType="NoticeVO">
		SELECT *
		  FROM (SELECT ROWNUM RNUM, N.*
    			  FROM (SELECT *
            			  FROM NOTICE
           				 ORDER BY NOTICE_NUM DESC) N)
		WHERE RNUM BETWEEN #{begin} AND #{end}
	</select>
	
	<!-- 공지사항 게시글 검색 건수 조회 -->
	<select id="noticeSearchCount" parameterType="String" resultType="int">
		SELECT COUNT(*) AS CNT
  		  FROM NOTICE
 		 WHERE NOTICE_TITLE LIKE '%'|| #{keyword} ||'%'
	</select>
	

	<!-- 공지사항 검색 -->
	<select id="noticeSearch" parameterType="map" resultType="NoticeVO">
		SELECT ROWNUM, N.*
		  FROM (SELECT *
		          FROM NOTICE
		         WHERE NOTICE_TITLE LIKE '%'|| #{keyword} ||'%'
		         ORDER BY NOTICE_NUM DESC) N
		 WHERE ROWNUM BETWEEN #{begin} AND #{end}
	</select>
	
		
	<!-- 공지사항 쓰기 -->
	<insert id="noticeWrite" parameterType="NoticeVO">
		INSERT INTO NOTICE
    			(NOTICE_NUM, ADMIN_NUM, NOTICE_TITLE, CONTENTS, REG_DATE, MOD_DATE)
		VALUES (NOTICE_SEQ.NEXTVAL, #{adminNum}, #{noticeTitle}, #{contents} , SYSDATE, SYSDATE)
	</insert>
	
	<!-- 공지사항 수정 -->
	<update id="noticeUpdate" parameterType="NoticeVO">
		UPDATE NOTICE
		   SET NOTICE_TITLE = #{noticeTitle},
    		   CONTENTS = #{contents},
    		   MOD_DATE = SYSDATE
		 WHERE NOTICE_NUM = #{noticeNum}
	</update>
	
	<!-- 공지사항 댓글 삭제 -->
	<delete id="noticeDelete" parameterType="int">
		DELETE FROM NOTICE
		 WHERE NOTICE_NUM = #{noticeNum}
	</delete>
	
	<!-- 게시글의 내용 -->
	<select id="noticeView" parameterType="int" resultType="NoticeVO">
		SELECT *
		  FROM NOTICE
		 WHERE NOTICE_NUM = #{noticeNum}
	</select>
	
	<!-- 문의게시글 댓글 쓰기 -->
	<insert id="commentWrite" parameterType="InquiryCommentVO">
		INSERT INTO INQUIRY_COMMENT
   		   (IQ_COMMENT_NUM, INQUIRY_NUM,
           CONTENTS, REG_DATE, MOD_DATE)
  	   VALUES (INQUIRY_COMMENT_SEQ.NEXTVAL, #{inquiryNum},
            #{contents}, SYSDATE, SYSDATE)
	</insert>
	
	<!-- 문의게시글 댓글 삭제 -->
	<delete id="deleteComment" parameterType="int">
		DELETE FROM INQUIRY_COMMENT
		 WHERE IQ_COMMENT_NUM = #{iqCommentNum}
	</delete>
</mapper>